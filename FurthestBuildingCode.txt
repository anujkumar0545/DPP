 int helpMeReach(vector<int> &heights, int currIndex, int bricks, int ladders, vector<vector<vector<int> > > &dp){
        if(currIndex>=heights.size()-1) return 0; //Reached at destination

        if(heights[currIndex]>=heights[currIndex+1])  return 1+helpMeReach(heights, currIndex+1, bricks, ladders);

        int heightDifference = heights[currIndex+1] - heights[currIndex];

        if(heightDifference <= bricks && ladders>0)
            return 1+max(helpMeReach(heights, currIndex+1, bricks-heightDifference, ladders),
                    helpMeReach(heights, currIndex+1, bricks, ladders-1));
        if(ladders>0) return 1+helpMeReach(heights, currIndex+1, bricks, ladders-1);
        if(heightDifference <= bricks) return 1+helpMeReach(heights, currIndex+1, bricks-heightDifference, ladders);
        return 0;
    }
    
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
        int n = heights.size();
        vector<vector<vector<int> > > dp(
        n+5, vector<vector<int> >(bricks+5, vector<int>(ladders+5,0)));
        int ans = helpMeReach(heights, 0, bricks, ladders);
        
        return ans;
    }